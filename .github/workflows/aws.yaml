# This GitHub Actions workflow automates the deployment of a Dockerized application to an AWS EC2 instance.
# 
# Workflow Name: Deploy Application Docker Image to EC2 instance
#
# Trigger:
#   - Runs on every push to the 'main' branch.
#
# Jobs:
#   1. Continuous-Integration:
#      - Runs on: ubuntu-latest (GitHub-hosted runner)
#      - Steps:
#          - Checks out the repository code.
#          - Configures AWS credentials using secrets.
#          - Logs in to Amazon ECR (Elastic Container Registry).
#          - Builds the Docker image from the repository.
#          - Tags and pushes the image to the specified ECR repository.
#
#   2. Continuous-Deployment:
#      - Depends on: Continuous-Integration job completion.
#      - Runs on: self-hosted runner (typically an EC2 instance).
#      - Steps:
#          - Checks out the repository code.
#          - Configures AWS credentials using secrets.
#          - Logs in to Amazon ECR.
#          - Runs the Docker image as a container, exposing port 8080.
#          - Passes AWS and MongoDB credentials as environment variables to the container.
#
# Secrets Required:
#   - AWS_ACCESS_KEY_ID: AWS access key for authentication.
#   - AWS_SECRET_ACCESS_KEY: AWS secret key for authentication.
#   - AWS_DEFAULT_REGION: AWS region for deployment.
#   - ECR_REPO: Name of the ECR repository.
#   - MONGODB_URL: Connection string for MongoDB (used by the application).
#
# Notes:
#   - The workflow uses two separate runners: a GitHub-hosted runner for CI and a self-hosted runner for CD.
#   - Ensure the self-hosted runner has Docker installed and is properly configured to pull images from ECR.
#   - The application is exposed on port 8080.

name: Deploy Application Docker Image to EC2 instance

on:
  push:
    branches: [main]

jobs:
  Continuous-Integration:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPO }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .  
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  Continuous-Deployment:
    needs: Continuous-Integration
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Run Docker Image to serve users
        run: |
         docker run -d -e AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" -e AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" -e AWS_DEFAULT_REGION="${{ secrets.AWS_DEFAULT_REGION }}" -e MONGODB_URL="${{ secrets.MONGODB_URL }}" -p 8080:8080 "${{ steps.login-ecr.outputs.registry }}"/"${{ secrets.ECR_REPO }}":latest